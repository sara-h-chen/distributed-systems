Distributed Systems Part 1
Question 1(a)
The basic principle is that clients send their requests to a primary which executes the requests and sends update messages to the backups. The backups do not execute any invocations but apply the changes produced by the invocation execution at the primary. Invocations therefore do not need to be coordinated.

(a) Incoming request
- Received by the front end, and the front end will forward the request to a primary replica. This request will contain a unique identifier.
(b) Coordination
- Decide the ordering of a request relative to other requests. The primary replica will process each request automatically, in the order in which it receives it relative to other requests. It checks the unique ID on the request that it receives, and if it has already processed the request then it will re-send the response to the client. (Handling message loss). Gurantees that updates are processed in the same order, which is the case if primary backup communication is based on FIFO. But this is insufficient to ensure correct execution in case of failure of the primary. In case of failure of the primary, and a replica takes over as the new primary, mechanisms have to be put in place to ensure the updates sent by the new primary are properly ordered.
(c) Execution
- The primary processes the requests and stores its response
(d) Agreement
- The replicas achieve a consensus on the effect of the requests. So, if the request is for an update then the primary will send the updated state, the response and the unique identifier to all the backups, which will store the information in a process called result propagation. The backups send an acknowledgement to the primary to confirm receipt of the information.
(e) Response
- The primary replica responds to the front end, which will then process the response before returning it to the client

Although it uses little processing power when compared to other replication techniques, passive replication suffers from a high reconfiguration cost when the primary fails.

Question 1(b) ^ Ref: http://www.cs.usfca.edu/~srollins/courses/cs682-s08/web/notes/replication.html
Passive replication ensures information availability because even in the event that the primary server fails, a secondary replica manager can take its place. To communicate updates while ensuring that we can tolerate a failure of the primary replica before, during and after updating, we use group membership communication, which must include the following features:
- provide an interface for membership changes
- provide a failure detector
- notify members of membership changes
- perform address expansion to ensure that messages sent to the group reach all replicas
With this, we can provide view-synchronous communication, which is an extension of reliable multicast. A view is a list of the processes currently belonging to the group and when membership changes, a new view is sent to all members. the backups send an acknowledgement to the primary server to confirm receipt of the information, and in case of non-ack from a replica, the message will be re-sent by the primary server. All messages that originate in a given view must be delivered before a new view is delivered. This form of communication is costly and may require serveral rounds of communication for each multicast. Because each replica has the same record of updates, passive replication can tolerate n crash failures if n+1 replicas are present. The view-synchronous semantics guarantee that either all the backups or none of them will deliver any given update before delivering the new view; the primary and the surviving backups all agree on whether any particular client's update has or has not been processed.

3)(a) Suppose the primary server may fail sometimes. Explain what procedures should be
introduced to the distributed system in order to resolve this failure situation. In addition, if the
failed primary server recovers, describe what should be done to allow this server to run as
part of the distributed system again.

The client should not connect directly to the primary server, as this would mean that the failure of the primary server would cause the entire system to fail. Instead, the front-end should reroute all the requests that it receives from the client to the servers, and is responsibe for finding a new server to route the request to when the primary fails.

The front-end provides transparency through the RMI. This means that new sockets will not have to be established manually, each time a connection goes down. if there have been failures, new primary servers may take over, meaning the URI has changed, so you would just need to lookup the value of the URI each time to ensure that you connect to the server.

The passive replicas should hold the latest state of the system and be ready to take over as the primary server upon failure. In such a case, the other replicas should be able to begin pulling the latest state from the new primary server, and as such should be able to reroute their requests dynamically, and this is achieved through the user of a proxy and a nameserver, which allows you to reroute to the correct server using a name, and hides the specific URI by holding it in a nameserver, which implements a network service for providing responses to queries against a directory service.

Using a proxy and a nameserver allows you to dynamically reconnect to servers, without having to specify URIs and ports. This allows you to use any free port, and prevents the situation where a new server is unable to connect because a port is still being held, due to a process not being terminated correctly.

The system should be able to detect changes in connection. Given that each server is begun at different times, and a small time frame between each request to the primary server, at least one server should be able to detect the exact moment (+/- 1 second) that the primary server fails. To reduce the load on the server and the network, you don't want this time frame to be too close together.

If the failed primary server recovers, then it should simply be able to reconnect to the distributed system as a passive replica, instead of reestablishing it as the primary, as this would require more overhead. It would have to be able to detect that there already is a primary server and thus establish itself as a passive replica.

3)(i) A description of all necessary modifications made to the servers, the front-end and the client programs, in terms of their program codes or how they are executed during
runtime.

Client program -- no changes; transparency from front-end
Front-end -- only have to refresh Proxy before every command to ensure that the URI is for the running primary. 
Server program -- upon failure of the primary, an exception will occur and the passive replicas will realize that they can no longer pull data from the primary to update their state. In such a case, they will check the nameserver to see if it has changed; if another passive replica has taken over the role of the primary, then the server will begin pulling data from the new primary. Otherwise, it will take over the role of primary itself. It will remove the previous primary's URI from the nameserver, updating it with its own URI, so that the other servers would now be able to pull data from it. A restriction is placed upon the server: if it does not carry any data, it is highly likely that the server had just recovered from failure, and does not carry the latest system state, and as such, will not be allowed to take over as primary. When the previous primary server recovers from failure, it will rejoin the distributed system as a passive replica, as it will be able to detect that there is now a new primary server, which it can then update its own state from.
